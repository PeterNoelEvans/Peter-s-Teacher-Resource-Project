generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(uuid())
  name                  String
  email                 String
  password              String
  role                  String
  nickname              String?                @unique
  yearLevel             Int?
  class                 String?
  active                Boolean                @default(true)
  lastLogin             DateTime?
  resetToken            String?
  resetTokenExpiry      DateTime?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  parentId              String?
  assessments           Assessment[]
  assessmentSubmissions AssessmentSubmission[]
  createdResources      Resource[]             @relation("resourceCreator")
  resourcesUsed         ResourceUsage[]
  studentCourses        StudentCourse[]
  studentProgress       StudentProgress[]
  subjectTeacher        SubjectTeacher[]
  parent                User?                  @relation("ParentChild", fields: [parentId], references: [id])
  children              User[]                 @relation("ParentChild")
}

model CoreSubject {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  subjects    Subject[]
}

model Subject {
  id              String            @id @default(uuid())
  name            String
  description     String?
  yearLevel       Int
  coreSubjectId   String
  unitTerm        String            @default("Unit")
  partTerm        String            @default("Part")
  sectionTerm     String            @default("Section")
  isArchived      Boolean           @default(false)
  archivedAt      DateTime?
  archiveReason   String?
  transferredAt   DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  studentCourses  StudentCourse[]
  studentProgress StudentProgress[]
  coreSubject     CoreSubject       @relation(fields: [coreSubjectId], references: [id])
  teachers        SubjectTeacher[]
  topics          Topic[]
  units           Unit[]
  weeklySchedules WeeklySchedule[]

  @@unique([name, coreSubjectId, yearLevel])
}

model Topic {
  id              String            @id @default(uuid())
  name            String
  description     String?
  order           Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  subjectId       String
  assessments     Assessment[]      @relation("TopicAssessments")
  resources       Resource[]
  studentProgress StudentProgress[]
  subject         Subject           @relation(fields: [subjectId], references: [id])
}

model Resource {
  id              String           @id @default(uuid())
  title           String
  description     String?
  type            String
  url             String?
  content         String?
  filePath        String?
  thumbnail       String?
  duration        Int?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  unitId          String?
  partId          String?
  sectionId       String?
  topicId         String
  userId          String
  usageCount      Int              @default(0)
  metadata        Json?
  order           Int              @default(0)
  part            Part?            @relation(fields: [partId], references: [id])
  section         Section?         @relation("ResourceSection", fields: [sectionId], references: [id])
  topic           Topic            @relation(fields: [topicId], references: [id])
  unit            Unit?            @relation(fields: [unitId], references: [id])
  createdBy       User             @relation("resourceCreator", fields: [userId], references: [id])
  usedBy          ResourceUsage[]
  assessments     Assessment[]     @relation("ResourceAssessments")
  sections        Section[]        @relation("ResourceSections")
  weeklySchedules WeeklySchedule[] @relation("ResourceToWeeklySchedule")
}

model ResourceUsage {
  id         String   @id @default(uuid())
  resourceId String
  userId     String
  usedAt     DateTime @default(now())
  resource   Resource @relation(fields: [resourceId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([resourceId, userId])
}

model Unit {
  id          String     @id @default(uuid())
  name        String
  description String?
  order       Int
  subjectId   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parts       Part[]
  resources   Resource[]
  subject     Subject    @relation(fields: [subjectId], references: [id])
}

model Part {
  id          String     @id @default(uuid())
  name        String
  description String?
  order       Int
  unitId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  unit        Unit       @relation(fields: [unitId], references: [id])
  resources   Resource[]
  sections    Section[]
}

model Section {
  id            String       @id @default(uuid())
  name          String
  description   String?
  order         Int
  partId        String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  assessments   Assessment[]
  resources     Resource[]   @relation("ResourceSection")
  part          Part         @relation(fields: [partId], references: [id])
  resourcesMany Resource[]   @relation("ResourceSections")
}

model Assessment {
  id               String                 @id @default(uuid())
  title            String
  description      String?
  type             String
  category         String?
  criteria         String?
  questions        Json?
  dueDate          DateTime?
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  sectionId        String
  userId           String
  topicId          String?
  weeklyScheduleId String?
  maxAttempts      Int?
  section          Section                @relation(fields: [sectionId], references: [id])
  topic            Topic?                 @relation("TopicAssessments", fields: [topicId], references: [id])
  createdBy        User                   @relation(fields: [userId], references: [id])
  weeklySchedule   WeeklySchedule?        @relation(fields: [weeklyScheduleId], references: [id])
  submissions      AssessmentSubmission[]
  mediaFiles       MediaFile[]
  resources        Resource[]             @relation("ResourceAssessments")
}

model MediaFile {
  id           String     @id @default(uuid())
  type         String
  url          String?
  filePath     String?
  duration     Int?
  label        String?
  assessmentId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  assessment   Assessment @relation(fields: [assessmentId], references: [id])
}

model StudentProgress {
  id          String   @id @default(uuid())
  studentId   String
  subjectId   String
  topicId     String
  status      String
  score       Float?
  lastUpdated DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  student     User     @relation(fields: [studentId], references: [id])
  subject     Subject  @relation(fields: [subjectId], references: [id])
  topic       Topic    @relation(fields: [topicId], references: [id])

  @@unique([studentId, subjectId, topicId])
}

model WeeklySchedule {
  id          String       @id @default(uuid())
  weekNumber  Int
  startDate   DateTime
  endDate     DateTime
  objectives  String
  subjectId   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  assessments Assessment[]
  subject     Subject      @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  resources   Resource[]   @relation("ResourceToWeeklySchedule")
}

model StudentCourse {
  id        String   @id @default(cuid())
  studentId String
  subjectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   User     @relation(fields: [studentId], references: [id])
  subject   Subject  @relation(fields: [subjectId], references: [id])

  @@unique([studentId, subjectId])
}

model TeacherTransferLog {
  id            String   @id @default(uuid())
  fromTeacherId String
  toTeacherId   String
  subjectIds    String
  transferredAt DateTime
  reason        String?
  createdAt     DateTime @default(now())
}

model SubjectTeacher {
  id           String    @id @default(uuid())
  subjectId    String
  teacherId    String
  isActive     Boolean   @default(true)
  role         String    @default("EDITOR")
  assignedAt   DateTime  @default(now())
  removedAt    DateTime?
  removeReason String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  subject      Subject   @relation(fields: [subjectId], references: [id])
  teacher      User      @relation(fields: [teacherId], references: [id])

  @@unique([subjectId, teacherId])
}

model AssessmentSubmission {
  id           String     @id @default(uuid())
  answers      Json
  score        Float?
  submittedAt  DateTime   @default(now())
  assessmentId String
  studentId    String
  attempts     Int?
  totalTime    Int?
  assessment   Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  student      User       @relation(fields: [studentId], references: [id])
}
